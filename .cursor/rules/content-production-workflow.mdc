
# 内容生产工作流程规则

## 工作流程概述

当处理内容生产任务时，请遵循以下9个阶段的完整流程：

### 第一阶段：源内容获取
1. **URL获取与验证**
   - 验证外部URL的有效性
   - **优先使用 Jina Reader API**: `curl -s "https://r.jina.ai/{URL}" > /tmp/article.md`
   - 如果 Jina Reader 失败，回退到 curl 或浏览器获取内容
   - 处理网络超时和重试机制

2. **源内容检索**
   - 将内容保存到 `content/sources/` 目录
   - 使用命名规则：`{topic}_{date}.md`
   - Jina Reader API 自动处理 HTML 到 Markdown 的转换

### 第二阶段：资源处理
3. **图片提取与本地化**
   - 扫描源文档识别所有外部图片URL
   - 下载图片到 `public/images/` 目录
   - 保持原始文件名或使用语义化命名
   - 将外部链接替换为本地路径 `/images/filename.ext`

### 第三阶段：内容优化
4. **内容清理与重写**
   - 移除导航菜单、页脚、广告等无关内容
   - 保留所有技术细节、代码示例、最佳实践说明
   - 重新组织章节结构，提高可读性
   - 统一标题层级、代码块格式

5. **来源信息提取**
   - 从源内容或用户提供的信息中提取原作者
   - 获取原始文章的完整链接
   - 提取或确定文章的发布日期
   - 记录任何相关的版权声明或使用许可
   - **GitHub 项目特殊处理**:
     - 在文章标题下方突出显示 GitHub 链接和 Star 数量
     - 格式：`> **⭐ GitHub**: [owner/repo](https://github.com/owner/repo) (X.Xk stars)`
     - 优先展示项目的受欢迎程度和活跃度

6. **英文文档创建**
   - 创建文件到 `content/docs/en/best-practices/`
   - 使用 `.mdx` 格式（支持React组件）
   - 添加Front Matter包含标题、描述、语言标识、作者、来源、日期
   - 自动从源内容或用户提供的信息中提取作者、来源URL和发布日期

### 第四阶段：多语言支持
7. **中文翻译**
   - 创建文件到 `content/docs/zh/best-practices/`
   - 保持技术术语准确性
   - 适应中文读者习惯
   - 保留代码示例不变
   - 维持原文档结构
   - 包含相同的作者、来源、日期信息

### 第五阶段：发布与文档化
8. **文档发布**
   - 确保目录结构符合约定
   - 验证所有图片链接正确
   - 检查MDX语法无错误
   - 确保所有文档都包含正确的作者、来源和日期信息

9. **工作流程文档化**
   - 记录完整流程和工具使用
   - 更新工作流程文档

## 渲染错误预防最佳实践

### MDX 语法规范
1. **代码块语言标识符**
   - ✅ **正确**: ````bash` 或 ````javascript`
   - ❌ **错误**: ````bash:filename.sh` 或 ````js:app.js`
   - **解决方案**: 使用标准语言标识符，文件名通过单独文本行显示

2. **标题结构优化**
   - ✅ **正确**: `# Simple Title` 或 `# Title with "Quotes"`
   - ❌ **错误**: `# Title with "nested" [links](url)`
   - **解决方案**: 避免在标题中嵌套链接，简化标题结构

3. **链接嵌套预防**
   - ✅ **正确**: 使用纯文本标题，链接放在正文中
   - ❌ **错误**: 在标题中直接使用 Markdown 链接
   - **解决方案**: 将链接移到标题下方或正文中

### Front Matter 规范
1. **标题格式**
   - ✅ **正确**: `title: "Simple Title"`
   - ❌ **错误**: `title: "Title with "quotes" inside"`
   - **解决方案**: 使用单引号或转义双引号

2. **描述字段**
   - ✅ **正确**: `description: "Simple description"`
   - ❌ **错误**: 包含未转义的特殊字符
   - **解决方案**: 避免在描述中使用复杂字符

### 代码块处理
1. **语言标识符**
   - 只使用 Shiki 支持的标准语言标识符
   - 常见支持的语言：`bash`, `javascript`, `typescript`, `python`, `json`, `yaml`, `markdown`
   - 避免使用 `:filename` 后缀

2. **代码内容**
   - 确保代码块内容完整，没有截断
   - 避免在代码块中使用未闭合的标签
   - 检查代码语法是否正确

### 图片链接处理
1. **路径格式**
   - ✅ **正确**: `/images/filename.png`
   - ❌ **错误**: `../images/filename.png` 或绝对路径
   - **解决方案**: 使用相对于 public 目录的路径

2. **文件名规范**
   - 使用小写字母、数字、连字符
   - 避免空格和特殊字符
   - 保持文件扩展名正确

### 特殊字符处理
1. **引号使用**
   - 在 MDX 中优先使用单引号
   - 必要时转义双引号：`\"`
   - 避免在标题中使用复杂引号组合

2. **特殊符号**
   - 避免在标题中使用 `@`, `#`, `$` 等特殊符号
   - 必要时使用 HTML 实体：`&amp;`, `&lt;`, `&gt;`

### 验证检查清单
- [ ] 所有代码块使用标准语言标识符
- [ ] 标题结构简单，无嵌套链接
- [ ] Front Matter 格式正确，无特殊字符冲突
- [ ] 图片路径使用正确格式
- [ ] 无未闭合的 HTML 标签
- [ ] 链接格式正确，无嵌套问题

## 质量控制检查

### 内容质量检查
- [ ] 所有外部图片已本地化
- [ ] 图片链接正确指向本地路径
- [ ] 技术细节完整保留
- [ ] 代码示例格式正确
- [ ] 无关内容已清理

### 多语言质量检查
- [ ] 中文翻译准确自然
- [ ] 技术术语翻译一致
- [ ] 代码示例保持原样
- [ ] 文档结构保持一致

### 技术规范检查
- [ ] Front Matter 格式正确
- [ ] 文件路径符合约定
- [ ] 图片路径使用相对路径
- [ ] MDX语法无错误
- [ ] 无渲染错误（嵌套链接、特殊字符等）

### 来源和版权信息检查
- [ ] 在 Front Matter 中自动添加作者信息（author）
- [ ] 在 Front Matter 中自动添加来源链接（source）
- [ ] 在 Front Matter 中自动添加发布日期（date）
- [ ] 在文章末尾添加详细的来源和致谢章节
- [ ] 提供可点击的原始链接
- [ ] 说明文章基于原创工作扩展

## 工具与技术栈

### 核心工具
- **内容获取**: 
  - curl, 浏览器开发者工具
  - **Jina Reader API**: 使用 `https://r.jina.ai/{URL}` 直接获取页面的 Markdown 格式内容
  - 这是获取网页内容的最有效方法，自动处理 HTML 到 Markdown 的转换
- **文件操作**: Claude Code 编辑工具
- **图片处理**: wget, curl 下载
- **格式转换**: HTML到Markdown转换（Jina Reader API 自动处理）

### 文件格式
- **源文件**: .md (Markdown)
- **发布文件**: .mdx (MDX，支持React组件)
- **图片格式**: .png, .jpg, .svg

## 目录结构约定

```
project/
├── content/
│   ├── docs/          # 发布的文档
│   │   ├── en/        # 英文文档
│   │   └── zh/        # 中文文档
│   └── sources/       # 原始源材料
├── public/
│   └── images/        # 本地化图片资源
└── workflow-documentation.md  # 工作流程文档
```

## 错误处理与最佳实践

### 常见问题处理
1. **URL失效**: 建立URL有效性检查机制，设置重试机制
2. **图片下载失败**: 实现断点续传机制，建立下载队列
3. **翻译质量**: 建立技术术语词典，实施翻译质量评分
4. **构建失败**: 建立自动化构建测试，实施渐进式发布策略
5. **渲染错误**: 实施MDX语法检查，建立渲染验证流程

### 自动化建议
1. **脚本化图片下载**: 创建自动提取和下载图片的脚本
2. **批量翻译工具**: 集成翻译API以提高效率
3. **质量检查脚本**: 自动验证链接有效性和格式正确性
4. **MDX验证工具**: 创建MDX语法检查脚本

## 自动索引系统

### 索引页面管理
1. **目录索引页面创建**
   - 为每个文档目录自动创建 `index.mdx` 文件
   - 包含该目录下所有文章的链接和描述
   - 支持中英文双语索引页面
   - 自动更新文章列表和描述

2. **首页最近文章索引**
   - 自动更新首页的 "Recent Posts" 部分
   - 按发布日期排序显示最新文章
   - 包含文章标题、描述和链接
   - 支持中英文双语显示

### 自动索引触发条件
1. **新文章添加时**
   - 检测到新文章添加到任何目录
   - 自动更新对应目录的索引页面
   - 更新首页最近文章列表
   - 验证所有链接的有效性

2. **文章删除时**
   - 从索引页面移除对应链接
   - 更新文章计数和描述
   - 保持索引页面的整洁性

3. **文章修改时**
   - 更新索引页面中的文章描述
   - 保持链接的准确性
   - 验证修改后的内容完整性

### 索引页面模板
1. **目录索引页面结构**
   ```mdx
   ---
   title: 目录名称
   description: 目录描述
   lang: en/zh
   ---
   
   # 目录标题
   
   目录介绍内容
   
   ## 精选文章
   
   <Cards>
     <Card 
       title="文章标题" 
       description="文章描述"
       href="/docs/lang/category/article-slug" 
     />
   </Cards>
   ```

2. **首页最近文章结构**
   - 显示最新5-10篇文章
   - 包含发布日期信息
   - 按时间倒序排列
   - 支持分页显示

### 索引自动化脚本
1. **文章扫描脚本**
   - 扫描所有文档目录
   - 提取文章元数据（标题、描述、日期）
   - 生成索引页面内容
   - 验证链接有效性

2. **索引更新脚本**
   - 检测文件系统变化
   - 自动触发索引更新
   - 保持索引页面同步
   - 错误处理和日志记录

3. **最近文章管理脚本**
   - 使用 `npm run recent-posts` 管理首页最近文章
   - 支持添加、删除、列出最近文章
   - 结构化数组管理，便于维护
   - 自动检测重复文章

### 索引质量保证
1. **链接验证**
   - 检查所有索引链接的有效性
   - 验证文件路径的正确性
   - 确保图片链接正常工作
   - 定期进行链接健康检查

2. **内容一致性**
   - 确保索引描述与实际内容一致
   - 保持中英文索引的同步
   - 验证元数据的准确性
   - 检查分类标签的正确性

## 使用说明

当处理内容生产任务时：
1. 首先确认源URL和内容类型
2. 按照9个阶段逐步执行
3. 在每个阶段完成后进行质量检查
4. 特别关注渲染错误预防检查清单
5. 记录任何遇到的问题和解决方案
6. 更新工作流程文档以反映改进
7. **自动执行索引更新**：
   - 新文章发布后自动更新相关索引页面
   - 使用 `npm run recent-posts add <article-path> <language>` 添加文章到首页最近文章
   - 使用 `npm run recent-posts list` 查看当前最近文章列表
   - 使用 `npm run recent-posts remove <slug>` 从最近文章列表中移除文章
   - 验证所有索引链接的有效性
   - 确保索引页面的完整性和准确性

@workflow-documentation.md
